/*
 * Copyright (c) 2004, Laminar Research.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
#include "TexUtils.h"
#include "AssertUtils.h"
#include "BitmapUtils.h"

#if APL
	#include <OpenGL/gl.h>
	#include <OpenGL/glu.h>
#else
	#include "glew.h"
	#include <GL/glu.h>
#endif


struct  gl_info_t {
	int		gl_major_version;
	bool	has_tex_compression;
	bool	has_non_pots;
	bool	has_bgra;
	int		max_tex_size;
	bool	has_rgtc;
	bool	has_bptc;
};

static gl_info_t gl_info = { 0 };

#define INIT_GL_INFO		if(gl_info.gl_major_version == 0) init_gl_info(&gl_info);

static void init_gl_info(gl_info_t * i)
{
	CHECK_GL_ERR
	const char * ver_str = (const char *)glGetString(GL_VERSION);      CHECK_GL_ERR
	const char * ext_str = (const char *)glGetString(GL_EXTENSIONS);   CHECK_GL_ERR

	sscanf(ver_str,"%d", &i->gl_major_version);
#if APL
/* Apple only gives by default a 2.1 compatible openGL contexts.
   BUT if openGL 3.2 or higher compatible contexts are requested by adding
   "NSOpenGLPFAOpenGLProfile, NSOpenGLProfileVersion3_2Core," just as the textbooks
   say - all openGl 1/2 direct drawing is disbled. i.e. most openGl functions used
   by WED are unavailable. So we can only test for openGL 2 core functionality available 
   here and pray glew gets us the rest ...
*/
	if(i->gl_major_version < 2)
	{
		LOG_MSG("OpenGL 2.0 or higher required. Found version '%s'\n", ver_str);
		AssertPrintf("OpenGL 2.0 or higher required. Found version '%s'\n", ver_str);
	}
#else
	if(i->gl_major_version < 3)
	{
		LOG_MSG("OpenGL 3.0 or higher required. Found version '%s'\n", ver_str);
		AssertPrintf("OpenGL 3.0 or higher required. Found version '%s'\n", ver_str);
	}
#endif
	i->has_tex_compression = strstr(ext_str,"GL_ARB_texture_compression") != NULL;
	i->has_non_pots = strstr(ext_str,"GL_ARB_texture_non_power_of_two") != NULL;
	i->has_bgra = strstr(ext_str,"GL_EXT_bgra") != NULL;
	i->has_rgtc = strstr(ext_str,"GL_ARB_texture_compression_rgtc") != NULL;
	i->has_bptc = strstr(ext_str,"GL_ARB_texture_compression_bptc") != NULL;

	glGetIntegerv(GL_MAX_TEXTURE_SIZE,&i->max_tex_size);
	// if(i->max_tex_size > 2*8192)	i->max_tex_size = 2*8192;
	if(i->has_tex_compression)	glHint(GL_TEXTURE_COMPRESSION_HINT,GL_NICEST); CHECK_GL_ERR
	LOG_MSG("OpenGL renderer  : %s\n", glGetString(GL_RENDERER));              CHECK_GL_ERR
	LOG_MSG("OpenGL Version   : %s\n", ver_str);
	LOG_MSG("Max texture size : %5d  DXT : %d   POT : %d\n", i->max_tex_size, i->has_tex_compression, i->has_non_pots);
	LOG_MSG("                         RGTC : %d  BPTC : %d \n", i->has_rgtc, i->has_bptc);
	LOG_MSG("                          FBO : %d   VBO : %d  MSext : %d\n", strstr(ext_str, "GL_ARB_framebuffer_object") != nullptr,
											strstr(ext_str, "GL_ARB_vertex_buffer_object") != nullptr,
	                                        strstr(ext_str, "GL_EXT_framebuffer_multisample") != nullptr);
	LOG_FLUSH();
}

/*****************************************************************************************
 * UTILS
 *****************************************************************************************/


inline int NextPowerOf2(int a)
{
	GLint	maxDim = gl_info.max_tex_size;
	int rval = 2;
	while(rval < a && rval < maxDim)
		rval <<= 1;
	return rval;
}


void UnpadImage(ImageInfo * im)
{
	for (int y = 0; y < im->height; ++y)
	{
		unsigned char * src = im->data + (y * (im->width * im->channels + im->pad));
		unsigned char * dst = im->data + (y * (im->width * im->channels          ));
		if (src != dst)
			memmove(dst,src,im->width * im->channels);
	}
	im->pad = 0;
}

/*****************************************************************************************
 * LoadTextureFromFile
 *****************************************************************************************/
bool LoadTextureFromFile(
						const char * 	inFileName,
						int 			inTexNum,
						int 			flags,
						int * 			outWidth,
						int * 			outHeight,
						float *  		outS,
						float * 		outT)
{
	struct ImageInfo	im = { 0 };
	if (LoadBitmapFromAnyFile(inFileName, &im) == 0)
	{
		if (im.pad != 0)
			UnpadImage(&im);

		int res = LoadTextureFromImage(im, inTexNum, flags, outWidth, outHeight, outS, outT);
		DestroyBitmap(&im);
		return res;
	}
	return false;
}

/*****************************************************************************************
 * LoadTextureFromImage
 *****************************************************************************************/
bool LoadTextureFromImage(ImageInfo& im, int inTexNum, int inFlags, int * outWidth, int * outHeight, float * outS, float * outT)
{
	INIT_GL_INFO

	// Process alpha.  Then remove padding.  Finally, figure out the next biggest power of 2.  If we aren't
	// a power of 2, we may need to resize.  That will be done with rescaling if the user wants.  Also if the bitmap
	// is bigger than the max power of 2 supported by the HW, force rescaling.
	if (inFlags & tex_MagentaAlpha)	ConvertBitmapToAlpha(&im, true);
	if (im.pad != 0)
 		UnpadImage(&im);

	int non_pots = ((inFlags & tex_Always_Pad) == 0) && gl_info.has_non_pots;

	int		res_x = non_pots ? min((int) im.width, gl_info.max_tex_size) : NextPowerOf2(im.width);
	int		res_y = non_pots ? min((int) im.height,gl_info.max_tex_size) : NextPowerOf2(im.height);
	bool	resize = (res_x != im.width || res_y != im.height);
	bool	rescale = resize && (inFlags & tex_Rescale);
	if (im.width > res_x || im.height > res_y)	// Always rescale if the image is too big for the max tex!!
		rescale = true;

	ImageInfo *	useIt = &im;
	ImageInfo	rescaleBits;
	if (resize)
	{
		if (CreateNewBitmap(res_x, res_y, im.channels, &rescaleBits) != 0)
		{
			return false;
		}
		useIt = &rescaleBits;

		if (rescale) {
			CopyBitmapSection(&im, &rescaleBits, 0, 0, im.width, im.height, 0, 0, rescaleBits.width, rescaleBits.height);
			if (outS) *outS = 1.0;
			if (outT) *outT = 1.0;
		} else {
			CopyBitmapSectionDirect(im, rescaleBits, 0, 0, 0, 0, im.width, im.height);
			if (im.width < rescaleBits.width)
				CopyBitmapSectionDirect(im, rescaleBits, im.width-1, 0, im.width, 0, 1, im.height);
			if (im.height < rescaleBits.height)
				CopyBitmapSectionDirect(im, rescaleBits, 0, im.height-1, 0, im.height, im.width, 1);
			if (im.height < rescaleBits.height && im.width < rescaleBits.width)
				CopyBitmapSectionDirect(im, rescaleBits, im.width-1, im.height-1, im.width, im.height, 1, 1);

			if (outS) *outS = (float) im.width / (float) rescaleBits.width;
			if (outT) *outT = (float) im.height / (float) rescaleBits.height;
		}
	} else {
		if (outS) *outS = 1.0;
		if (outT) *outT = 1.0;
	}


	if (outWidth) *outWidth = useIt->width;
	if (outHeight) *outHeight = useIt->height;

	glBindTexture(GL_TEXTURE_2D, inTexNum);  CHECK_GL_ERR
	
	int	iformat, glformat;
	if (useIt->channels == 1)
	{
		iformat = glformat = GL_ALPHA;
	}
	else if(gl_info.has_bgra)
	{
		                            iformat = GL_RGB;  glformat = GL_BGR;
		if (useIt->channels == 4) { iformat = GL_RGBA; glformat = GL_BGRA; }
	}
	else
	{
		long cnt = useIt->width * useIt->height;
		unsigned char * p = useIt->data;
		while (cnt--)
		{
			swap(p[0], p[2]);						// Ben says: since we get BGR or BGRA, swap red and blue channesl to make RGB or RGBA.  Some day we could
			p += useIt->channels;					// use our brains and use GL_BGR_EXT and GL_BGRA_EXT; literally all GL cards from Radeon/GeForce on support this.
			}
													// Michael says: that day was the last day of 2018. Eight years, 4 months and EXA bytes swapped by CPUs later.
													// But, its just a drop into the ocean: ALL images except BMP are channel order swapped when loading in BitmapUtils,
													// the real architectural misfortune was choosing the ImageInfo data format to be BGR rather than RGB.
													
								  iformat = glformat = GL_RGB;
		if (useIt->channels == 4) iformat = glformat = GL_RGBA;
	}

	if(gl_info.has_tex_compression && (inFlags & tex_Compress_Ok))
	{
		switch (iformat) {
		case GL_RGB:	iformat = GL_COMPRESSED_RGB;	break;
		case GL_RGBA:	iformat = GL_COMPRESSED_RGBA;	break;
		}
	}

	if (inFlags & tex_Mipmap)
		gluBuild2DMipmaps(GL_TEXTURE_2D, iformat, useIt->width, useIt->height, glformat, GL_UNSIGNED_BYTE, useIt->data); CHECK_GL_ERR
	else
		glTexImage2D(GL_TEXTURE_2D, 0, iformat, useIt->width ,useIt->height, 0,	glformat, GL_UNSIGNED_BYTE, useIt->data); CHECK_GL_ERR

	if (resize)
		DestroyBitmap(&rescaleBits);

	// BAS note: for some reason on my WinXP system with GF-FX, if
	// I do not set these explicitly to linear, I get no drawing at all.
	// Who knows what default state the card is in. :-(
//	if(inFlags & tex_Nearest)
//	{
//		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
//		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
//	} else 
	if (inFlags & tex_Linear) {
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, (inFlags & tex_Mipmap) ? GL_LINEAR_MIPMAP_NEAREST : GL_LINEAR);
	} else {
		// If we have nearest-neighboring and we are down-sampling WITHOUT a mip-map we STILL use linear in an attempt to keep this thing from looking TOTALY blitzed, I guess?
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, (inFlags & tex_Mipmap) ? GL_NEAREST_MIPMAP_NEAREST : GL_LINEAR);
	}
	if(inFlags & tex_Wrap) {
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT );
	    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT );
	}
	else {
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	}
	return true;
}

#if LOAD_DDS_DIRECT

struct DXT1Block {
    uint16_t colors[2];
    uint8_t  rows[4];
};

struct DXT3Block {
    DXT1Block	alphas;
    DXT1Block 	colors;
};

struct DXT5AlphaBlock {
    uint8_t 		alpha[2];
    uint8_t			idx[6];
};

struct DXT5Block {
    DXT5AlphaBlock	alphas;
    DXT1Block		colors;
};


// ****** swapping of BC7 format color endpoints ******
// https://docs.microsoft.com/en-us/windows/win32/direct3d11/bc7-format-mode-reference#mode-3

static void swap_bc7m1_sets(char * a)
{
	uint32_t src, dst;

	for(int i = 0; i < 3; i++)
	{
		src = *(uint32_t*) (a + 1 + 3 * i);      // array starts at 8 bit offset = 1 byte
		dst = src & 0xFF00'0000u;
		
		dst |= (src & 0xFFFu   ) << 12;
		dst |= (src & 0xFFF000u) >> 12;
		if(i == 2)                               // one p-bit per set, shared for both endpoints
		{
			dst &= ~0x0300'0000u;
			dst |= (src & 0x0100'0000u) << 1 | (src & 0x0200'0000u) >> 1;
		}
		*(uint32_t*) (a + 1 + 3 * i) = dst;
	}
}

static void swap_bc7m1_endpts(char * a, bool first, bool second)
{
	uint32_t src, dst;

	for(int i = 0; i < 3; i++)
	{
		src = *(uint32_t*) (a + 1 + 3 * i);       // array starts at 8 bit offset = 1 byte
		dst = src & 0xFF00'0000u;

		if(first)  dst |= (src & 0x03F) << 6 | (src & 0xFC0) >> 6;
		else       dst |=  src & 0xFFF;
		
		if(second) dst |= (src & 0x03F000u) << 6 | (src & 0xFC0000u) >> 6;
		else       dst |=  src & 0xFFF000u;
		
		*(uint32_t*) (a + 1 + 3 * i) = dst;
	}
}

static void swap_bc7m3_sets(char * a)
{
	uint64_t src, dst;
	
	src = *(uint64_t*) (a + 1);                                // array starts at 10 bit offset - 1 byte = 2 bits
	dst  =  src & 0xFC00'0000'0000'0003ull;
	dst |= (src & (0xFFFCull       | 0xFFFCull << 28)) << 14;  // red & green
	dst |= (src & (0xFFFCull << 14 | 0xFFFCull << 42)) >> 14;
	*(uint64_t*) (a + 1) = dst;

	src = *(uint64_t*) (a + 8);                                // offset 10 + 8 * 7 = 66 bis - 8 byte = 2 bits
	dst  =  src & 0xFFFF'FFFC'0000'0003ull;
	dst |= (src & 0xFFFCull      ) << 14;                      // blue
	dst |= (src & 0xFFFCull << 14) >> 14;
	dst |= (src & 0x000Cull << 14) << 2 | (src & 0x0030ull << 14) >> 2;   // p-bits
	*(uint64_t*) (a + 8) = dst;
}

static void swap_bc7m3_endpts(char * a, bool first, bool second)
{
	uint64_t src, dst;
	
	src = *(uint64_t*) (a + 1);
	dst  =  src & 0xFC00'0000'0000'0003ull;
	if(first) { dst |= (src & (0x01FCull        | 0x01FCull << 28)) << 7;
	            dst |= (src & (0xFE00ull        | 0xFE00ull << 28)) >> 7; }
	else        dst |=  src & (0xFFFCull        | 0xFFFCull << 28);
	
	if(second) { dst |= (src & (0x01FCull << 14 | 0x01FCull << 42)) << 7;
	             dst |= (src & (0xFE00ull << 14 | 0xFE00ull << 42)) >> 7; }
	else         dst |=  src & (0xFFFCull << 14 | 0xFFFCull << 42);
	*(uint64_t*) (a + 1) = dst;

	src = *(uint64_t*) (a + 8);
	dst  =  src & 0xFFFF'FFFF'C000'0003ull;
	if(first) { dst |= (src & 0x01FCull) << 7;
	            dst |= (src & 0xFE00ull) >> 7; }
	else        dst |=  src & 0xFFFCull;                         // todo: pbits
	
	if(second) { dst |= (src & 0x01FCull << 14) << 7;
	             dst |= (src & 0xFE00ull << 14) >> 7; }
	else         dst |=  src & 0xFFFCull << 14;                  // todo: pbits
	*(uint64_t*) (a + 8) = dst;
}

static void swap_bc7m5_endpts(char * a)
{
	uint64_t src = *(uint64_t*) (a+1);               // array starts at 8 bit offset = 1 byte
	uint64_t dst = src & 0xFFFF'FC00'0000'0000ull;
	for(int i = 0; i < 3; i++)
	{
		dst |= (src & (0x7Full << (    14 * i))) << 7;
		dst |= (src & (0x7Full << (7 + 14 * i))) >> 7;
	}
	*(uint64_t*) (a+1) = dst;
}

static void swap_bc7m5_a_endpts(char * a)
{
	uint64_t src = *(uint64_t*) (a+1);               // array starts at 8 + 6 * 7 bit offset = 1 byte + 42 bits
	uint64_t dst = src & 0xFC00'03FF'FFFF'FFFFull;
	
	dst |= (src & (0xFFull << (    14 * 3))) << 8;
	dst |= (src & (0xFFull << (8 + 14 * 3))) >> 8;
	*(uint64_t*) (a+1) = dst;
}

static void swap_bc7m6_endpts(char * a)
{
	uint64_t src = *(uint64_t*) (a);                  // array starts at 7 bit offset
	uint64_t dst = src & 0x800'0000'0000'0007Full;
	for(int i = 0; i < 4; i++)
	{
		dst |= (src & (0x7Full << ( 7 + 14 * i))) << 7;
		dst |= (src & (0x7Full << (14 + 14 * i))) >> 7;
	}
	*(uint64_t*) (a) = dst;
}

// ***** y-flipping of BC1/3/4/5 format selector index array ******

inline void swap_12bit_idx(uint8_t * a)
{
	uint64_t src = *(uint64_t *) a;
	uint64_t dst = src & 0xFFFF'0000'0000'0000ull;

	dst |= (src & 0xFFFull) << 36 | (src & 0xFFF000ull) << 12 | (src & 0xFFF000000ull) >> 12 | (src & 0xFFF000000000ull) >>36;

	*(uint64_t *) a = dst;
}

// ***** y-flipping of BC7 format selector index arrays ******

static void swap_31bit_idx(char * a)
{
	uint64_t src = *(uint64_t *) (a+8);
	uint32_t src_a = (uint32_t) (src >> 32);
	uint32_t src_c = (uint32_t) (src >> 1);
	uint32_t dst_c, dst_a, tmp;
	
	int lsb = src & 3;                 // those bits aren't part of our index table at all, save it for restoration later
	
	tmp = src_c & 0x02;                // that implicit zero - its omitted and the LSB of the first idx in the table is shifted up. Undo that by
	src_c &= ~0x03u;                   // inserting the implicit 0 where it belongs, as this idx will after the swap be a "normal" index
	src_c |= tmp >> 1;

	tmp = src_a & 0x02;
	src_a &= ~0x03u;
	src_a |= tmp >> 1;

	dst_c = (src_c & 0xFFu) << 24 | (src_c & 0xFF00u) << 8 | (src_c & 0xFF0000u) >> 8 | (src_c & 0xFF000000u) >> 24;
	dst_a = (src_a & 0xFFu) << 24 | (src_a & 0xFF00u) << 8 | (src_a & 0xFF0000u) >> 8 | (src_a & 0xFF000000u) >> 24;

	bool need_swap = dst_c & 0x02;     // Now another idx got into the first position and that idx may have a non-zreo MSB. To fix that,
	if(need_swap) dst_c = ~dst_c;	   // reverse/invert all IDX and swap endpoints to get the effectively same thing.
	bool need_a_swap = dst_a & 0x02;
	if(need_a_swap) dst_a = ~dst_a;

	tmp = dst_c & 0x01;                // shift things up to propperly omit the implicit zero again
	dst_c &= ~0x03u;
	dst_c |= tmp << 1;

	tmp = dst_a & 0x01;
	dst_a &= ~0x03u;
	dst_a |= tmp << 1;

	uint64_t dst = ((uint64_t) dst_a << 32) | ((uint64_t) dst_c << 1);

 	dst |= lsb;                          // restore the LSB to whatever it was before - now that we have shifted to omit the implicit MSB again

	*(uint64_t *) (a+8) = dst;
	if(need_swap) swap_bc7m5_endpts(a);
	if(need_a_swap) swap_bc7m5_a_endpts(a);
}

static void swap_63bit_idx(char * a)
{
	uint64_t src = *(uint64_t *) (a+8);
	uint64_t dst, tmp;

	bool lsb = src & 1;                  // that bit isn't part of our index table at all, save it for restoration later

	tmp = src & 0x0E;                    // that implicit zero - its omitted and the last 3 LSB of the table are shifted up. Undo that by
	src &= ~0x0Full;                     // inserting the implicit 0 where it belongs, as this idx will after the swap be a "normal" index
	src |= tmp >> 1;

	dst = (src & 0xFFFFull) << 48 | (src & 0xFFFF'0000ull) << 16 | (src & 0xFFFF'0000'0000ull) >> 16 | (src & 0xFFFF'0000'0000'0000ull) >> 48;

	bool need_swap = dst & 0x08;         // Now another idx got into the first position and that idx may have a non-zreo MSB. To fix that,
										 // reverse/invert all IDX and swap endpoints to get the effectively same thing.
	if(need_swap) dst = ~dst;

	tmp = dst & 0x07;                    // shift things up to propperly omit the implicit zero again
	dst &= ~0x0Full;
	dst |= tmp << 1;

 	if(lsb) dst |= 1;                    // restore the LSB to whatever it was before - now that we have shifted to omit the implicit MSB again

	*(uint64_t *) (a+8) = dst;
	if(need_swap) swap_bc7m6_endpts(a);
}

#define B(p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a) 0b ## a ## a ## a ## b ## b ## b ## c ## c ## c ## d ## d ## d \
                                              ## e ## e ## e ## f ## f ## f ## g ## g ## g ## h ## h ## h \
                                              ## i ## i ## i ## j ## j ## j ## k ## k ## k ## l ## l ## l \
                                              ## m ## m ## m ## n ## n ## n ## o ## o ## o ## p ## p ## p

// https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_texture_compression_bptc.txt
// Table.P2 (two-subset partitioning pattern)
static uint64_t bc7_part3bit[64] = {
  B(0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1),  B(0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1),  B(0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1),  B(0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1),
  B(0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1),  B(0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1),
  B(0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1),
  B(0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),  B(0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1),
  B(0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1),  B(0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0),  B(0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0),  B(0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0),
  B(0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0),  B(0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0),  B(0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0),  B(0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1),
  B(0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0),  B(0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0),  B(0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0),  B(0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0),
  B(0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0),  B(0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0),  B(0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0),  B(0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0),
  B(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1),  B(0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1),  B(0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0),  B(0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0),
  B(0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0),  B(0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0),  B(0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1),  B(0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1),
  B(0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0),  B(0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0),  B(0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0),  B(0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0),
  B(0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0),  B(0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1),  B(0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1),  B(0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0),
  B(0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0),  B(0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0),  B(0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0),  B(0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0),
  B(0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1),  B(0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0),  B(0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0),
  B(0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1),  B(0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1),  B(0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1),  B(0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1),
  B(0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1),  B(0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0),  B(0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,0),  B(0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1) };

#undef B
#define B(p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a) 0b ## a ## a ## b ## b ## c ## c ## d ## d \
                                              ## e ## e ## f ## f ## g ## g ## h ## h \
                                              ## i ## i ## j ## j ## k ## k ## l ## l \
                                              ## m ## m ## n ## n ## o ## o ## p ## p
static uint32_t bc7_part2bit[64] = {
  B(0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1),  B(0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1),  B(0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1),  B(0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1),
  B(0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1),  B(0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1),
  B(0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1),
  B(0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),  B(0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1),  B(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1),
  B(0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1),  B(0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0),  B(0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0),  B(0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0),
  B(0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0),  B(0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0),  B(0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0),  B(0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1),
  B(0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0),  B(0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0),  B(0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0),  B(0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0),
  B(0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0),  B(0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0),  B(0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0),  B(0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0),
  B(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1),  B(0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1),  B(0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0),  B(0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0),
  B(0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0),  B(0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0),  B(0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1),  B(0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1),
  B(0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0),  B(0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0),  B(0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0),  B(0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0),
  B(0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0),  B(0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1),  B(0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1),  B(0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0),
  B(0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0),  B(0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0),  B(0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0),  B(0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0),
  B(0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1),  B(0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1),  B(0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0),  B(0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0),
  B(0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1),  B(0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1),  B(0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1),  B(0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1),
  B(0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1),  B(0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0),  B(0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,0),  B(0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1) };

#undef B

// Table.A2 (Anchor index values for the second subset of two-subset partitioning)
static char bc7_anchor_idx[64] = {
	15,15,15,15,15,15,15,15,      
    15,15,15,15,15,15,15,15,
    15, 2, 8, 2, 2, 8, 8,15,
     2, 8, 2, 2, 8, 8, 2, 2,
    15,15, 6, 8, 2, 8,15,15,
     2, 8, 2, 2, 2,15,15, 6,
     6, 2, 6, 8,15,15, 2, 2,
    15,15,15,15,15, 2, 2,15  };

static void swap_bc7m1_idx(char * a, int part)
{
	uint64_t src = *(uint64_t *) (a+10);
	uint64_t dst, tmp;
	
	int64_t lsb = src & 0xFFFF'0000'0000'0003; // those bits aren't part of our index table at all, save it for restoration later
	
	tmp = src & 0x0F;           // The first idx has an implicit zero - its omitted and the LSBs of that idx in the table are shifted up.
	src &= ~0x0Full;            // Undo that by inserting the implicit 0 where it belongs, so all idx can be swapped in a regular fashion
	src |= tmp >> 1;
	                            // But now we TWO endpoints sets, resulting in another idx with an implicit/supressed zero. But it
								// depends on the partitioning scheme in what position that idx is. So look it up ... BC7 sucks, huh ?
	uint64_t shift_pattern = ~0ull >> (61 - 3 * bc7_anchor_idx[part]);

	tmp = src & shift_pattern;
	src &= ~shift_pattern;
	src |= tmp >> 1;
	
	bool newpart = true;
	bool swapset = false;
	switch(part)
	{
		case  3: part = 23; swapset = 0; break; 	case 23: part =  3; swapset = 0; break;
		case  4: part = 24; swapset = 0; break;		case 24: part =  4; swapset = 0; break;
		case  5: part = 25; swapset = 1; break;		case 25: part =  5; swapset = 1; break;
		case  6: part = 21; swapset = 1; break;		case 21: part =  6; swapset = 1; break;
		case  7: part = 19; swapset = 0; break;		case 19: part =  7; swapset = 0; break;
		case  8: part = 20; swapset = 0; break;		case 20: part =  8; swapset = 0; break;
		case  9: part = 22; swapset = 1; break;		case 22: part =  9; swapset = 1; break;
		case 10: part = 16; swapset = 1; break;		case 16: part = 10; swapset = 1; break;
		case 11: part = 17; swapset = 0; break;		case 17: part = 11; swapset = 0; break;
		case 12: part = 18; swapset = 1; break;		case 18: part = 12; swapset = 1; break;
		case 14: part = 15; swapset = 1; break;		case 15: part = 14; swapset = 1; break;
		case 27: part = 31; swapset = 1; break;		case 31: part = 27; swapset = 1; break;
		case 28: part = 30; swapset = 1; break;		case 30: part = 28; swapset = 1; break;
		case 40: part = 41; swapset = 1; break;		case 41: part = 40; swapset = 1; break;
		case 42: part = 43; swapset = 1; break;		case 43: part = 42; swapset = 1; break;
		case 48: part = 51; swapset = 0; break;		case 51: part = 48; swapset = 0; break;
		case 49: part = 50; swapset = 0; break;		case 50: part = 49; swapset = 0; break;
		case 52: part = 55; swapset = 0; break;		case 55: part = 52; swapset = 0; break;
		case 53: part = 54; swapset = 1; break;		case 54: part = 53; swapset = 1; break;
		case 56: part = 57; swapset = 1; break;		case 57: part = 56; swapset = 1; break;
		case 58: part = 59; swapset = 0; break;		case 59: part = 58; swapset = 0; break;
		case 60: part = 61; swapset = 0; break;		case 61: part = 60; swapset = 0; break;
		default: newpart = false;
				 if(part == 13 || (part >= 33 && part <= 39) || part == 46)	swapset = 1;
	}
	if(newpart) 
	{
		*(uint8_t *) a = part << 2 | 2;
		shift_pattern = ~0ull >> (61 - 3 * bc7_anchor_idx[part]);
	}
	dst = (src & 0xFFFull) << 36 | (src & 0xFFF000ull) << 12 | (src & 0xFFF000000ull) >> 12 | (src & 0xFFF000000000ull) >> 36;

	// determine need to swap endpoints + invert all relevant indices because the relevant index has MSB = 1
	bool swap_seg1 = dst & 0x04;
	bool swap_seg2 = dst & 0x04ull << (3 * bc7_anchor_idx[part]);

	uint64_t invert_pattern = (swap_seg2 ? bc7_part3bit[part] : 0) | (swap_seg1 ? (~bc7_part3bit[part] & 0xFFFF'FFFF'FFFFull) : 0);
	dst = dst ^ invert_pattern;
	
	tmp = dst & shift_pattern >> 1;	// shift things up to propperly omit the implicit zeros again
	dst &= ~shift_pattern;
	dst |= tmp << 1;
	            
	tmp = dst & 0x07;
	dst &= ~0x0Full;
	dst |= tmp << 1;
	
 	dst |= lsb;                  // restore the LSB to whatever it was before - now that we have shifted to omit the implicit MSBs again
	*(uint64_t *) (a+10) = dst;
	
	if(swapset) swap_bc7m1_sets(a);
	swap_bc7m1_endpts(a, swap_seg1, swap_seg2);
}

static void swap_bc7m3_idx(char * a, int part)
{
	uint32_t src = *(uint32_t *) (a+12);
	uint32_t dst, tmp;
	
	int lsb = src & 3;          // those bits aren't part of our index table at all, save it for restoration later
	
	tmp = src & 0x07;           // The first idx has an implicit zero - its omitted and the LSBs of that idx in the table are shifted up.
	src &= ~0x07u;              // Undo that by inserting the implicit 0 where it belongs, so all idx can be swapped in a regular fashion
	src |= tmp >> 1;
	                            // But now we TWO endpoints sets, resulting in another idx with an implicit/supressed zero. But it
								// depends on the partitioning scheme in what position that idx is. So look it up ... BC7 sucks, huh ?
	uint32_t shift_pattern = ~0u >> (30 - 2 * bc7_anchor_idx[part]);

	tmp = src & shift_pattern;
	src &= ~shift_pattern;
	src |= tmp >> 1;
	
	bool newpart = true;
	bool swapset = false;
	switch(part)
	{
		case  3: part = 23; swapset = 0; break; 	case 23: part =  3; swapset = 0; break;
		case  4: part = 24; swapset = 0; break;		case 24: part =  4; swapset = 0; break;
		case  5: part = 25; swapset = 1; break;		case 25: part =  5; swapset = 1; break;
		case  6: part = 21; swapset = 1; break;		case 21: part =  6; swapset = 1; break;
		case  7: part = 19; swapset = 0; break;		case 19: part =  7; swapset = 0; break;
		case  8: part = 20; swapset = 0; break;		case 20: part =  8; swapset = 0; break;
		case  9: part = 22; swapset = 1; break;		case 22: part =  9; swapset = 1; break;
		case 10: part = 16; swapset = 1; break;		case 16: part = 10; swapset = 1; break;
		case 11: part = 17; swapset = 0; break;		case 17: part = 11; swapset = 0; break;
		case 12: part = 18; swapset = 1; break;		case 18: part = 12; swapset = 1; break;
		case 14: part = 15; swapset = 1; break;		case 15: part = 14; swapset = 1; break;
		case 27: part = 31; swapset = 1; break;		case 31: part = 27; swapset = 1; break;
		case 28: part = 30; swapset = 1; break;		case 30: part = 28; swapset = 1; break;
		case 40: part = 41; swapset = 1; break;		case 41: part = 40; swapset = 1; break;
		case 42: part = 43; swapset = 1; break;		case 43: part = 42; swapset = 1; break;
		case 48: part = 51; swapset = 0; break;		case 51: part = 48; swapset = 0; break;
		case 49: part = 50; swapset = 0; break;		case 50: part = 49; swapset = 0; break;
		case 52: part = 55; swapset = 0; break;		case 55: part = 52; swapset = 0; break;
		case 53: part = 54; swapset = 1; break;		case 54: part = 53; swapset = 1; break;
		case 56: part = 57; swapset = 1; break;		case 57: part = 56; swapset = 1; break;
		case 58: part = 59; swapset = 0; break;		case 59: part = 58; swapset = 0; break;
		case 60: part = 61; swapset = 0; break;		case 61: part = 60; swapset = 0; break;
		default: newpart = false;
				 if(part == 13 || (part >= 33 && part <= 39) || part == 46)	swapset = 1;
	}
	if(newpart) 
	{
		tmp = *(uint16_t *) a & 0xFC0Fu;
		*(uint16_t *) a = tmp | part << 4;
		shift_pattern = ~0u >> (30 - 2 * bc7_anchor_idx[part]);
	}
	dst = (src & 0xFFu) << 24 | (src & 0xFF00u) << 8 | (src & 0xFF0000u) >> 8 | (src & 0xFF000000u) >> 24;

	// determine need to swap endpoints + invert all relevant indices because the relevant index has MSB = 1
	bool swap_seg1 = dst & 0x02;
	bool swap_seg2 = dst & 0x02u << (2 * bc7_anchor_idx[part]);

	uint32_t invert_pattern = (swap_seg2 ? bc7_part2bit[part] : 0) | (swap_seg1 ? ~bc7_part2bit[part] : 0);
	dst = dst ^ invert_pattern;
	
	tmp = dst & shift_pattern >> 1;	// shift things up to propperly omit the implicit zeros again
	dst &= ~shift_pattern;
	dst |= tmp << 1;
	            
	tmp = dst & 0x03;
	dst &= ~0x07u;
	dst |= tmp << 1;
	
 	dst |= lsb;                  // restore the LSB to whatever it was before - now that we have shifted to omit the implicit MSBs again
	*(uint32_t *) (a+12) = dst;
	
	if(swapset) swap_bc7m3_sets(a);
	swap_bc7m3_endpts(a, swap_seg1, swap_seg2);
}

static void swap_bc7_idx(char * a)
{
	int mode;
	for(mode = 0; mode < 8; mode++)
		if(*(unsigned char*)a & (1 << mode)) break;
	switch(mode)
	{
		case 1: swap_bc7m1_idx(a, *(unsigned char*)a >> 2); break;
		case 3: swap_bc7m3_idx(a, *(unsigned short*)a >> 4 & 0x3F); break;
//      case 7: break; // similar to 3, same 2-bit indices, different 5555+P color endpoints w/equally ugly alignment as mode 3
		case 5: swap_31bit_idx(a); break;
//      case 4: break; // similar to 5, but two unequal length idx tables. color endpoints fit in 64bit registers, so not too bad to swap
		case 6: swap_63bit_idx(a); break;
		default: *a = 0; // make blocks with modes that can't be flipped (yet) transparent
	}
}

static void swap_blocks(char *a, char *b, GLint type)
{
	if (type == GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)
	{
		DXT5Block * x = (DXT5Block *) a;
		DXT5Block * y = (DXT5Block *) b;
		swap(*x,*y);
		swap_12bit_idx(x->alphas.idx);
		swap_12bit_idx(y->alphas.idx);
		swap(x->colors.rows[0], x->colors.rows[3]);
		swap(x->colors.rows[1], x->colors.rows[2]);
		swap(y->colors.rows[0], y->colors.rows[3]);
		swap(y->colors.rows[1], y->colors.rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_S3TC_DXT3_EXT)
	{
		DXT3Block * x = (DXT3Block *) a;
		DXT3Block * y = (DXT3Block *) b;
		swap(*x,*y);
		swap(x->alphas.rows[0], x->alphas.rows[3]);
		swap(x->alphas.rows[1], x->alphas.rows[2]);
		swap(y->alphas.rows[0], y->alphas.rows[3]);
		swap(y->alphas.rows[1], y->alphas.rows[2]);
		swap(x->colors.rows[0], x->colors.rows[3]);
		swap(x->colors.rows[1], x->colors.rows[2]);
		swap(y->colors.rows[0], y->colors.rows[3]);
		swap(y->colors.rows[1], y->colors.rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_S3TC_DXT1_EXT)
	{
		DXT1Block * x = (DXT1Block *) a;
		DXT1Block * y = (DXT1Block *) b;
		swap(*x,*y);
		swap(x->rows[0], x->rows[3]);
		swap(x->rows[1], x->rows[2]);
		swap(y->rows[0], y->rows[3]);
		swap(y->rows[1], y->rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_BPTC_UNORM_EXT) // BC7
	{
		DXT3Block * x = (DXT3Block *) a;
		DXT3Block * y = (DXT3Block *) b;
		swap(*x,*y);
		swap_bc7_idx(a);
		swap_bc7_idx(b);
	}
	else // BC4 or BC5
	{
		DXT5AlphaBlock * x = (DXT5AlphaBlock  *)a;
		DXT5AlphaBlock * y = (DXT5AlphaBlock  *)b;
		swap(*x, *y);
		swap_12bit_idx(x->idx);
		swap_12bit_idx(y->idx);
		if (type == GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT)
		{
			++x; ++y;
			swap(*x, *y);
			swap_12bit_idx(x->idx);
			swap_12bit_idx(y->idx);
		}
	}
}

static void swap_blocks(char *a, GLint type)
{
	if (type == GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)
	{
		DXT5Block * x = (DXT5Block *)a;
		swap_12bit_idx(x->alphas.idx);
		swap(x->colors.rows[0], x->colors.rows[3]);
		swap(x->colors.rows[1], x->colors.rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_S3TC_DXT3_EXT)
	{
		DXT3Block * x = (DXT3Block *)a;
		swap(x->alphas.rows[0], x->alphas.rows[3]);
		swap(x->alphas.rows[1], x->alphas.rows[2]);
		swap(x->colors.rows[0], x->colors.rows[3]);
		swap(x->colors.rows[1], x->colors.rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_S3TC_DXT1_EXT)
	{
		DXT1Block * x = (DXT1Block *)a;
		swap(x->rows[0], x->rows[3]);
		swap(x->rows[1], x->rows[2]);
	}
	else if (type == GL_COMPRESSED_RGBA_BPTC_UNORM_EXT) // BC7
	{
		swap_bc7_idx(a);
	}
	else // BC4 or BC5
	{
		DXT5AlphaBlock * x = (DXT5AlphaBlock  *)a;
		swap_12bit_idx(x->idx);
		if (type == GL_COMPRESSED_SIGNED_RG_RGTC2)
		{
			++x;
			swap_12bit_idx(x->idx);
		}
	}
}

static void BCx_y_flip(GLenum glformat, int dds_blocksize, char * data, int width_pix, int height_pix)
{
	int data_len = max(1 , (width_pix * height_pix) / 16) *  dds_blocksize;
	int blocks_per_line = max(1, width_pix / 4);
	int line_len = blocks_per_line * dds_blocksize;
	int swap_count = height_pix / 4 / 2;
	char * dds_line1 = data;
	char * dds_line2 = data + data_len - line_len;

	if(swap_count == 0)
		for (int i = 0; i < blocks_per_line; i++)
		{
			swap_blocks(dds_line1, glformat);
			dds_line1 += dds_blocksize;
		}
	while (swap_count--)
	{
		for (int i = 0; i < blocks_per_line; i++)
		{
			swap_blocks(dds_line1, dds_line2, glformat);
			dds_line1 += dds_blocksize;
			dds_line2 += dds_blocksize;
		}
		dds_line2 -= 2 * line_len;
	}
}

#if UNIT_TEST
int main()
{
	// for images of each CC compression type
	
	// load image A
	// flip compressed image A -> B
	// decode flipped image B
	// decode un-flipped image A
	// flip uncompressed image A
	// compare A-B
}
#endif

bool	LoadTextureFromDDS(
				char *			mem_start,
				char *			mem_end,
				int				in_tex_num,
				int				inFlags,
				int *			outWidth,
				int *			outHeight)
{
	INIT_GL_INFO

	if((mem_end - mem_start) < sizeof(TEX_dds_desc)) return false;
	const TEX_dds_desc * desc = (const TEX_dds_desc *) mem_start;

	if (strncmp(desc->dwMagic, "DDS ", 4) != 0) return false;
	if((SWAP32(desc->dwSize)) != (sizeof(*desc) - sizeof(desc->dwMagic))) return false;

	GLenum glformat;
	int dds_blocksize;
	char * data = mem_start + sizeof(TEX_dds_desc);

	if (gl_info.has_tex_compression && strncmp(desc->ddpfPixelFormat.dwFourCC, "DXT", 3) == 0)
		switch (desc->ddpfPixelFormat.dwFourCC[3])
		{
		case '1':	dds_blocksize =  8; glformat = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;	break;
		case '3':	dds_blocksize = 16; glformat = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;	break;
		case '5':	dds_blocksize = 16; glformat = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;	break;
		default:	return false;
		}
	else if (gl_info.has_rgtc && strncmp(desc->ddpfPixelFormat.dwFourCC, "ATI", 3) == 0)    // This format is NOT understood by X-Plane for now !!!
		switch (desc->ddpfPixelFormat.dwFourCC[3])
		{
//		case '1':	dds_blocksize =  8; glformat = GL_COMPRESSED_RED_RGTC1_EXT;		         break; // BC4 decoded to red channel only
		case '1':	dds_blocksize =  8; glformat = GL_COMPRESSED_LUMINANCE_LATC1_EXT;	     break; // BC4 decoded to rgb greyscale, e.g. crunch -DXT5A or BC4 in Gimp
		case '2':	dds_blocksize = 16; glformat = GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT; break; // BC5 two uncorrelated channels (normals !), crunch -DXN
		default:	return false;
		}
	else  if (gl_info.has_bptc && strncmp(desc->ddpfPixelFormat.dwFourCC, "DX10", 4) == 0)  // This format is NOT understood by X-Plane for now !!!
		{                                                                                   // Y-flipping partially implemented (modes 1,5,6 only), yet
			const TEX_dds_dx10 * dx10hdr = (const TEX_dds_dx10 *) (mem_start + sizeof(*desc));
			data += sizeof(TEX_dds_dx10);
			
			switch(dx10hdr->dxgiFormat)
			{
//				case 0x5F:   glformat = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT; break; // BC6  DXGI_FORMAT_BC6H_UF16
//				case 0x60:   glformat = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;   break; // BC6  DXGI_FORMAT_BC6H_SF16
				case 0x62:   glformat = GL_COMPRESSED_RGBA_BPTC_UNORM_EXT;         break; // BC7  DXGI_FORMAT_BC7_UNORM
				default: return false;													  // Deliberately don't read other DDS formats
			}
			dds_blocksize = 16;
		}
	else
		return false;

	int mips = 1;
	if(inFlags & tex_Mipmap && (SWAP32(desc->dwFlags)) & DDSD_MIPMAPCOUNT)
		mips = SWAP32(desc->dwMipMapCount);

	int x = SWAP32(desc->dwWidth);
	int y = SWAP32(desc->dwHeight);
	if (outWidth) *outWidth = x;
	if (outHeight) *outHeight = y;

	if ((mips && y != NextPowerOf2(y)) || y % 8 != 0) return false;  // flipping code can only handle certain heights

	glBindTexture(GL_TEXTURE_2D, in_tex_num);

	for (int level = 0; level < mips; ++level)
	{
		// lossless flip image in Y-direction to match orientation of all other textures in XPtools/X-plane
		// to match old MSFT DIB convention (0,0) == left bottom, but DDS / DXT starts at left top.
		BCx_y_flip(glformat, dds_blocksize, data, x, y);

		int data_len = max(1 , (x * y) / 16) *  dds_blocksize;
		glCompressedTexImage2D( GL_TEXTURE_2D, level, glformat, x, y, 0, data_len, data); CHECK_GL_ERR

		x = max(1, x >> 1);
		y = max(1, y >> 1);
		data += data_len;
	}

	if (inFlags & tex_Linear)
	{
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, (inFlags & tex_Mipmap) ? GL_LINEAR_MIPMAP_NEAREST : GL_LINEAR);
	}
	else
	{
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, (inFlags & tex_Mipmap) ? GL_NEAREST_MIPMAP_NEAREST : GL_LINEAR);
	}

	if (inFlags & tex_Wrap)
	{
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT );
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT );
	}
	else
	{
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);
	}
	return true;
}
#endif
